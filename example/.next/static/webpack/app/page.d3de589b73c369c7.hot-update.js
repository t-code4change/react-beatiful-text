"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
self["webpackHotUpdate_N_E"]("app/page",{

/***/ "(app-pages-browser)/../src/components/GlowSparksText.tsx":
/*!********************************************!*\
  !*** ../src/components/GlowSparksText.tsx ***!
  \********************************************/
/***/ ((module, __webpack_exports__, __webpack_require__) => {

eval(__webpack_require__.ts("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   GlowSparksText: () => (/* binding */ GlowSparksText)\n/* harmony export */ });\n/* harmony import */ var react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__ = __webpack_require__(/*! react/jsx-dev-runtime */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/jsx-dev-runtime.js\");\n/* harmony import */ var _styles_glowsparks_css__WEBPACK_IMPORTED_MODULE_1__ = __webpack_require__(/*! ../styles/glowsparks.css */ \"(app-pages-browser)/../src/styles/glowsparks.css\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2__ = __webpack_require__(/*! react */ \"(app-pages-browser)/./node_modules/next/dist/compiled/react/index.js\");\n/* harmony import */ var react__WEBPACK_IMPORTED_MODULE_2___default = /*#__PURE__*/__webpack_require__.n(react__WEBPACK_IMPORTED_MODULE_2__);\n\nvar _s = $RefreshSig$();\n\n\nfunction GlowSparksText(param) {\n    let { text, style, className = \"\" } = param;\n    _s();\n    const canvasRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const containerRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(null);\n    const animationRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)();\n    const particlesRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)([]);\n    const letterMasksRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)([]);\n    const tickRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(0);\n    const opaRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(1);\n    const fireworkTimerRef = (0,react__WEBPACK_IMPORTED_MODULE_2__.useRef)(0);\n    // Predefined colors for each letter\n    const letterColors = [\n        {\n            h: 197,\n            s: 100,\n            l: 50\n        },\n        {\n            h: 0,\n            s: 100,\n            l: 50\n        },\n        {\n            h: 45,\n            s: 100,\n            l: 50\n        },\n        {\n            h: 120,\n            s: 100,\n            l: 50\n        },\n        {\n            h: 280,\n            s: 100,\n            l: 50\n        },\n        {\n            h: 60,\n            s: 100,\n            l: 50\n        },\n        {\n            h: 300,\n            s: 100,\n            l: 50\n        }\n    ];\n    (0,react__WEBPACK_IMPORTED_MODULE_2__.useEffect)({\n        \"GlowSparksText.useEffect\": ()=>{\n            const canvas = canvasRef.current;\n            const container = containerRef.current;\n            if (!canvas || !container) return;\n            const ctx = canvas.getContext(\"2d\");\n            if (!ctx) return;\n            const resize = {\n                \"GlowSparksText.useEffect.resize\": ()=>{\n                    const rect = container.getBoundingClientRect();\n                    canvas.width = rect.width;\n                    canvas.height = rect.height;\n                }\n            }[\"GlowSparksText.useEffect.resize\"];\n            const buildTextMask = {\n                \"GlowSparksText.useEffect.buildTextMask\": ()=>{\n                    const letterMasks = [];\n                    const width = 400;\n                    const height = 200;\n                    const tempCanvas = document.createElement(\"canvas\");\n                    const tempCtx = tempCanvas.getContext(\"2d\");\n                    if (!tempCtx) return letterMasks;\n                    tempCanvas.width = width;\n                    tempCanvas.height = height;\n                    const fontSize = 160;\n                    tempCtx.font = \"bold \".concat(fontSize, \"px Arial\");\n                    // Measure total text width\n                    const totalMetrics = tempCtx.measureText(text);\n                    const totalWidth = totalMetrics.width;\n                    let currentX = (width - totalWidth) / 2;\n                    const y = height / 2 + fontSize * 0.35;\n                    // Process each letter separately\n                    text.split('').forEach({\n                        \"GlowSparksText.useEffect.buildTextMask\": (letter, index)=>{\n                            tempCtx.clearRect(0, 0, width, height);\n                            tempCtx.fillStyle = \"#000\";\n                            tempCtx.fillText(letter, currentX, y);\n                            const letterWidth = tempCtx.measureText(letter).width;\n                            const imageData = tempCtx.getImageData(0, 0, width, height);\n                            const data = imageData.data;\n                            const points = [];\n                            for(let i = 0; i < width * height; i++){\n                                if (data[i * 4 + 3] > 128) {\n                                    points.push({\n                                        x: i % width / width,\n                                        y: Math.floor(i / width) / height,\n                                        o: Math.random(),\n                                        t: Math.random()\n                                    });\n                                }\n                            }\n                            if (points.length > 0) {\n                                letterMasks.push({\n                                    hsl: letterColors[index % letterColors.length],\n                                    points: points\n                                });\n                            }\n                            currentX += letterWidth;\n                        }\n                    }[\"GlowSparksText.useEffect.buildTextMask\"]);\n                    return letterMasks;\n                }\n            }[\"GlowSparksText.useEffect.buildTextMask\"];\n            const createParticles = {\n                \"GlowSparksText.useEffect.createParticles\": (count)=>{\n                    const letterMasks = letterMasksRef.current;\n                    if (letterMasks.length === 0) return;\n                    for(let i = 0; i < count; i++){\n                        // Pick random letter mask\n                        const letterMask = letterMasks[Math.floor(Math.random() * letterMasks.length)];\n                        const maskElement = letterMask.points[Math.floor(Math.random() * letterMask.points.length)];\n                        const r1 = Math.random();\n                        const r2 = Math.random();\n                        const r3 = Math.random();\n                        const rad = r3 * Math.PI * 2;\n                        const speed = 0.003 + (r1 + r2) / 20;\n                        particlesRef.current.push({\n                            x: maskElement.x + (-0.5 + r1) / 300,\n                            y: maskElement.y + (-0.5 + r2) / 300,\n                            hsl: letterMask.hsl,\n                            si: 1 + Math.floor(Math.random() * 4),\n                            s: speed,\n                            l: 0,\n                            mx: Math.cos(rad) * (speed / (r1 < 0.05 ? 10 : 400)),\n                            my: Math.sin(rad) * (speed / (r1 < 0.05 ? 10 : 400)),\n                            active: true\n                        });\n                    }\n                }\n            }[\"GlowSparksText.useEffect.createParticles\"];\n            const createFirework = {\n                \"GlowSparksText.useEffect.createFirework\": ()=>{\n                    const x = 0.2 + Math.random() * 0.6;\n                    const y = 0.3 + Math.random() * 0.4;\n                    const color = letterColors[Math.floor(Math.random() * letterColors.length)];\n                    const particleCount = 50;\n                    for(let i = 0; i < particleCount; i++){\n                        const angle = i / particleCount * Math.PI * 2;\n                        const speed = 0.01 + Math.random() * 0.01;\n                        particlesRef.current.push({\n                            x: x,\n                            y: y,\n                            hsl: color,\n                            si: 2 + Math.floor(Math.random() * 3),\n                            s: 0.005,\n                            l: 0,\n                            mx: Math.cos(angle) * speed,\n                            my: Math.sin(angle) * speed - 0.002,\n                            active: true,\n                            isFirework: true\n                        });\n                    }\n                }\n            }[\"GlowSparksText.useEffect.createFirework\"];\n            const drawStatic = {\n                \"GlowSparksText.useEffect.drawStatic\": ()=>{\n                    const mask = maskRef.current;\n                    const step = 0.01;\n                    mask.forEach({\n                        \"GlowSparksText.useEffect.drawStatic\": (pos, i)=>{\n                            const opa = (1 + Math.cos(pos.x * 5 * pos.y * 5 + tickRef.current / 10)) / 2 * opaRef.current * pos.t * 0.5;\n                            ctx.fillStyle = \"hsla(\".concat(hue, \", \").concat(saturation, \"%, \").concat(lightness, \"%, \").concat(opa, \")\");\n                            ctx.fillRect(pos.x * canvas.width, pos.y * canvas.height, canvas.width / 150, canvas.width / 150);\n                            if (i % 2 === 0) return;\n                            pos.o += step;\n                            const glowOpa = Math.max(0, Math.sin(pos.o * Math.PI * 2));\n                            const padding = glowOpa * (canvas.width / 200);\n                            ctx.fillStyle = \"hsla(\".concat(hue, \", \").concat(saturation, \"%, \").concat(lightness, \"%, \").concat(opaRef.current * glowOpa * 0.2, \")\");\n                            if (pos.t < 0.5) {\n                                ctx.beginPath();\n                                ctx.arc(pos.x * canvas.width, pos.y * canvas.height, canvas.width / 500 + padding, 0, Math.PI * 2);\n                                ctx.fill();\n                            } else {\n                                ctx.fillRect(pos.x * canvas.width - padding, pos.y * canvas.height - padding, canvas.width / 150 + padding * 2, canvas.width / 150 + padding * 2);\n                            }\n                        }\n                    }[\"GlowSparksText.useEffect.drawStatic\"]);\n                }\n            }[\"GlowSparksText.useEffect.drawStatic\"];\n            const drawParticles = {\n                \"GlowSparksText.useEffect.drawParticles\": ()=>{\n                    particlesRef.current = particlesRef.current.filter({\n                        \"GlowSparksText.useEffect.drawParticles\": (particle)=>{\n                            if (!particle.active || particle.l >= 1) {\n                                return false;\n                            }\n                            particle.l += particle.s;\n                            particle.x += particle.mx;\n                            particle.y += particle.my;\n                            const alpha = opaRef.current * Math.sin(particle.l * Math.PI);\n                            ctx.fillStyle = \"hsla(\".concat(particle.hsl.h, \", \").concat(particle.hsl.s, \"%, \").concat(particle.hsl.l, \"%, \").concat(alpha, \")\");\n                            ctx.fillRect(particle.x * canvas.width, particle.y * canvas.height, particle.si, particle.si);\n                            return true;\n                        }\n                    }[\"GlowSparksText.useEffect.drawParticles\"]);\n                }\n            }[\"GlowSparksText.useEffect.drawParticles\"];\n            const animate = {\n                \"GlowSparksText.useEffect.animate\": ()=>{\n                    tickRef.current++;\n                    // Clear canvas\n                    ctx.fillStyle = \"transparent\";\n                    ctx.clearRect(0, 0, canvas.width, canvas.height);\n                    // Use lighter composite for glow effect\n                    ctx.globalCompositeOperation = \"lighter\";\n                    drawStatic();\n                    createParticles(50);\n                    drawParticles();\n                    ctx.globalCompositeOperation = \"source-over\";\n                    animationRef.current = requestAnimationFrame(animate);\n                }\n            }[\"GlowSparksText.useEffect.animate\"];\n            resize();\n            window.addEventListener(\"resize\", resize);\n            maskRef.current = buildTextMask();\n            animate();\n            return ({\n                \"GlowSparksText.useEffect\": ()=>{\n                    window.removeEventListener(\"resize\", resize);\n                    if (animationRef.current) {\n                        cancelAnimationFrame(animationRef.current);\n                    }\n                }\n            })[\"GlowSparksText.useEffect\"];\n        }\n    }[\"GlowSparksText.useEffect\"], [\n        text,\n        hue,\n        saturation,\n        lightness\n    ]);\n    return /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"div\", {\n        ref: containerRef,\n        className: \"glowsparks-container \".concat(className),\n        style: style,\n        children: /*#__PURE__*/ (0,react_jsx_dev_runtime__WEBPACK_IMPORTED_MODULE_0__.jsxDEV)(\"canvas\", {\n            ref: canvasRef,\n            className: \"glowsparks-canvas\"\n        }, void 0, false, {\n            fileName: \"/Users/tuanpham/MyLife/Code4Change/react-beatiful-text/src/components/GlowSparksText.tsx\",\n            lineNumber: 300,\n            columnNumber: 7\n        }, this)\n    }, void 0, false, {\n        fileName: \"/Users/tuanpham/MyLife/Code4Change/react-beatiful-text/src/components/GlowSparksText.tsx\",\n        lineNumber: 295,\n        columnNumber: 5\n    }, this);\n}\n_s(GlowSparksText, \"vU4c6DJC2WHPxRH3pFNUwRRIrag=\");\n_c = GlowSparksText;\nvar _c;\n$RefreshReg$(_c, \"GlowSparksText\");\n\n\n;\n    // Wrapped in an IIFE to avoid polluting the global scope\n    ;\n    (function () {\n        var _a, _b;\n        // Legacy CSS implementations will `eval` browser code in a Node.js context\n        // to extract CSS. For backwards compatibility, we need to check we're in a\n        // browser context before continuing.\n        if (typeof self !== 'undefined' &&\n            // AMP / No-JS mode does not inject these helpers:\n            '$RefreshHelpers$' in self) {\n            // @ts-ignore __webpack_module__ is global\n            var currentExports = module.exports;\n            // @ts-ignore __webpack_module__ is global\n            var prevSignature = (_b = (_a = module.hot.data) === null || _a === void 0 ? void 0 : _a.prevSignature) !== null && _b !== void 0 ? _b : null;\n            // This cannot happen in MainTemplate because the exports mismatch between\n            // templating and execution.\n            self.$RefreshHelpers$.registerExportsForReactRefresh(currentExports, module.id);\n            // A module can be accepted automatically based on its exports, e.g. when\n            // it is a Refresh Boundary.\n            if (self.$RefreshHelpers$.isReactRefreshBoundary(currentExports)) {\n                // Save the previous exports signature on update so we can compare the boundary\n                // signatures. We avoid saving exports themselves since it causes memory leaks (https://github.com/vercel/next.js/pull/53797)\n                module.hot.dispose(function (data) {\n                    data.prevSignature =\n                        self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports);\n                });\n                // Unconditionally accept an update to this module, we'll check if it's\n                // still a Refresh Boundary later.\n                // @ts-ignore importMeta is replaced in the loader\n                module.hot.accept();\n                // This field is set when the previous version of this module was a\n                // Refresh Boundary, letting us know we need to check for invalidation or\n                // enqueue an update.\n                if (prevSignature !== null) {\n                    // A boundary can become ineligible if its exports are incompatible\n                    // with the previous exports.\n                    //\n                    // For example, if you add/remove/change exports, we'll want to\n                    // re-execute the importing modules, and force those components to\n                    // re-render. Similarly, if you convert a class component to a\n                    // function, we want to invalidate the boundary.\n                    if (self.$RefreshHelpers$.shouldInvalidateReactRefreshBoundary(prevSignature, self.$RefreshHelpers$.getRefreshBoundarySignature(currentExports))) {\n                        module.hot.invalidate();\n                    }\n                    else {\n                        self.$RefreshHelpers$.scheduleUpdate();\n                    }\n                }\n            }\n            else {\n                // Since we just executed the code for the module, it's possible that the\n                // new exports made it ineligible for being a boundary.\n                // We only care about the case when we were _previously_ a boundary,\n                // because we already accepted this update (accidental side effect).\n                var isNoLongerABoundary = prevSignature !== null;\n                if (isNoLongerABoundary) {\n                    module.hot.invalidate();\n                }\n            }\n        }\n    })();\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(app-pages-browser)/../src/components/GlowSparksText.tsx\n"));

/***/ })

});